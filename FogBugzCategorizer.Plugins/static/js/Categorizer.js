// Generated by CoffeeScript 1.3.3
var addSelectedTask, createProjectItem, createSelectedItem, createSelectedProjectTask, createTaskItem, createTasks, getProjectTaskText, getSelectedCategories, loadProjectsAndSelected;

ï»¿$(function() {
  $.ajaxSetup({
    cache: false
  });
  console.log("jQuery version: " + ($().jquery));
  $('#CategorizerDiv').hide();
  $('#Categorizer').click(function(e) {
    e.preventDefault();
    $('#CategorizerDiv').toggle();
    if ($('#CategorizerDiv').is(':visible')) {
      return loadProjectsAndSelected();
    }
  });
  return $('#CategorizerSave').click(function(e) {
    e.preventDefault();
    $('#CategorizerNotifications').slideDown();
    return $.ajax({
      type: 'POST',
      url: settings.url,
      data: JSON.stringify({
        Command: 'SaveCategories',
        BugzId: settings.bugzId,
        Categories: getSelectedCategories()
      }),
      contentType: "application/json; charset=utf-8",
      dataType: 'html',
      success: function(result) {
        console.log("finished saving categories, got result: " + result);
        return $('#CategorizerNotifications').slideUp();
      }
    });
  });
});

loadProjectsAndSelected = function() {
  var data;
  data = $('#CategorizerDiv').data('loadAll');
  if (data) {
    return;
  }
  $('#CategorizerNotifications').slideDown();
  $('#CategorizerProjects').empty();
  return $.getJSON(settings.url, {
    Command: 'LoadAll',
    BugzId: settings.bugzId
  }, function(json) {
    $.each(json.Projects, function(key, val) {
      return createProjectItem(val).appendTo('#CategorizerProjects');
    });
    $.each(json.Selected, function(key, val) {
      return createSelectedItem(val).appendTo('#SelectedCategories');
    });
    $('#CategorizerDiv').data('loadAll', json);
    return $('#CategorizerNotifications').slideUp();
  });
};

createProjectItem = function(project) {
  var div;
  div = $('<div />');
  div.html(project.Name).click(function(e) {
    var data, projectObj;
    e.preventDefault();
    $('#CategorizerTasks').empty();
    data = $(this).data('tasks');
    if (data) {
      return createTasks(data);
    } else {
      $('#CategorizerNotifications').slideDown();
      projectObj = $(this);
      return $.getJSON(settings.url, {
        Command: 'GetTasks',
        Project: projectObj.html()
      }, function(json) {
        createTasks(json, function() {
          return projectObj.data('tasks', json);
        });
        return $('#CategorizerNotifications').slideUp();
      });
    }
  });
  return div;
};

createTasks = function(data, func) {
  $.each(data, function(key, val) {
    return createTaskItem(val).appendTo('#CategorizerTasks');
  });
  if (func) {
    return func();
  }
};

createTaskItem = function(task) {
  var div;
  div = $('<div />');
  div.html(task.Name).click(function(e) {
    e.preventDefault();
    if ($('#SelectedCategories div').filter(function() {
      return $(this).text() === getProjectTaskText(task) && $(this).is(':visible');
    }).length < 1) {
      return addSelectedTask($(this), task);
    }
  });
  return div;
};

addSelectedTask = function(taskObj, task) {
  createSelectedProjectTask(taskObj, task);
  return taskObj.hide();
};

createSelectedItem = function(task) {
  var div;
  div = $('<div />');
  div.data('task', task);
  div.html(getProjectTaskText(task)).click(function(e) {
    e.preventDefault();
    return $(this).hide();
  });
  return div.appendTo('#SelectedCategories');
};

createSelectedProjectTask = function(taskObj, task) {
  var div;
  div = $('<div />');
  div.data('task', task);
  div.html(getProjectTaskText(task)).click(function(e) {
    e.preventDefault();
    $(this).hide();
    return taskObj.show();
  });
  return div.appendTo('#SelectedCategories');
};

getProjectTaskText = function(task) {
  return "" + task.Project.Name + ": " + task.Name;
};

getSelectedCategories = function() {
  var categories;
  categories = [];
  $('#SelectedCategories div').each(function() {
    if ($(this).is(':visible')) {
      return categories.push($(this).data('task'));
    }
  });
  return categories;
};
